//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.CancellationTokens.Input
{
	using System.Threading;
	public partial interface ITestInteraface
	{
		/// <summary>
		/// Reads
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		Task ReadAsync(CancellationToken cancellationToken);

		/// <summary>
		/// Reads and writes
		/// </summary>
		/// <param name="content">The content</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns></returns>
		Task<bool> ReadWriteAsync(string content, CancellationToken cancellationToken);

		/// <summary>
		/// Multi read
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		Task MultiReadAsync(CancellationToken cancellationToken);

		/// <summary>
		/// Writes
		/// </summary>
		/// <param name="content">The content</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns></returns>
		Task<bool> WriteAsync(string content, CancellationToken cancellationToken);
	}


	public abstract partial class AbstractTest : ITestInteraface
	{
		public virtual Task ReadAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return Task.CompletedTask;
		}
		public Task ReadAsync()
		{
			return ReadAsync(CancellationToken.None);
		}

		/// <summary>
		/// Reads and writes
		/// </summary>
		/// <param name="content"></param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		public abstract Task<bool> ReadWriteAsync(string content, CancellationToken cancellationToken);

		/// <summary>
		/// Reads and writes
		/// </summary>
		/// <param name="content"></param>
		public Task<bool> ReadWriteAsync(string content)
		{
			return ReadWriteAsync(content, CancellationToken.None);
		}

		/// <summary>
		/// Writes
		/// </summary>
		/// <param name="content"></param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		public abstract Task<bool> WriteAsync(string content, CancellationToken cancellationToken);

		/// <summary>
		/// Writes
		/// </summary>
		/// <param name="content"></param>
		public Task<bool> WriteAsync(string content)
		{
			return WriteAsync(content, CancellationToken.None);
		}

		public virtual Task MultiReadAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return Task.CompletedTask;
		}

		public Task MultiReadAsync()
		{
			return MultiReadAsync(CancellationToken.None);
		}
	}

	public partial class TestCase : AbstractTest
	{
		public override Task ReadAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return SimpleFile.ReadAsync(cancellationToken);
		}

		public override async Task<bool> ReadWriteAsync(string content, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (SimpleFile.ReadAsync(cancellationToken));
			for (var i = 0; i < 10; i++)
			{
				cancellationToken.ThrowIfCancellationRequested();
				await (SimpleFile.WriteAsync(content));
			}
			cancellationToken.ThrowIfCancellationRequested();
			return await (SimpleFile.WriteAsync(content));
		}

		public override Task<bool> WriteAsync(string content, CancellationToken cancellationToken)
		{
			if (content == null)
			{
				throw new ArgumentNullException(nameof(content));
			}
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<bool>(cancellationToken);
			}
			return InternalWriteAsync();
			async Task<bool> InternalWriteAsync()
			{
				await (SimpleFile.ReadAsync(cancellationToken));
				for (var i = 0; i < 10; i++)
				{
					cancellationToken.ThrowIfCancellationRequested();
					await (SimpleFile.WriteAsync(content));
				}
				cancellationToken.ThrowIfCancellationRequested();
				return await (SimpleFile.WriteAsync(content));
			}
		}

		public override Task MultiReadAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				var num = 5;
				if (num > 10)
				{
					return SimpleFile.ReadAsync(cancellationToken);
				}
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}

	public partial class DerivedEmptyTestCase : TestCase
	{
		public override Task ReadAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return Task.CompletedTask;
		}

		public override Task<bool> ReadWriteAsync(string content, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<bool>(cancellationToken);
			}
			return Task.FromResult<bool>(false);
		}
	}
}
