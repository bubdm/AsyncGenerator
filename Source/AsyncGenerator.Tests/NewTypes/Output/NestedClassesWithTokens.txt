//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.NewTypes.Input
{
	using System.Threading;
	public class NestedClassesAsync
	{
		private readonly NestedClass _nestedClass;

		public NestedClassesAsync()
		{
			_nestedClass = new NestedClass();
		}

		public class NestedClass : IDisposable
		{
			public bool Disposed { get; set; }

			public NestedClass()
			{
				SimpleFile.Read();
			}

			public void Nop() { }

			public Task ReadAsync(CancellationToken cancellationToken = default(CancellationToken))
			{
				return SimpleFile.ReadAsync(cancellationToken);
			}

			public void Read()
			{
				SimpleFile.Read();
			}

			public void Dispose()
			{
				Disposed = true;
				Read();
			}
		}

		[Custom]
		public Task ReadAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				DoSomething();
				return SimpleFile.ReadAsync(cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public void DoSomething()
		{
			_nestedClass.Nop();
		}

		public Task Read2Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			return ReadAsync(cancellationToken);
		}

		public Task Read3Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			return _nestedClass.ReadAsync(cancellationToken);
		}

		public Task Read4Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				var cls = new NestedClass();
				return cls.ReadAsync(cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}
