//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.CSharpFeatures.Input
{
	public partial class ConditionalAccessWithNullCoalescing
	{
		public async Task VariablesAsync()
		{
			var reader = GetReader();
			var result1 = (reader == null ? null : await (reader.ReadContentAsStringAsync()))?.ToString().Length.ToString() ?? "1";
			var result2 = (reader == null ? null : await (reader.ReadContentAsStringAsync()))?.Length.ToString() ?? "2";
			var result3 = (reader == null ? null : await (reader.ReadContentAsStringAsync()))?[0].ToString() ?? "3";
		}

		public async Task AccessorsAsync()
		{
			var reader = GetReader();
			var readers = new[] { GetReader() };
			var readContentAsString2 = readers[0];
			var result1 = (readContentAsString2 == null ? null : await (readContentAsString2.ReadContentAsStringAsync()))?.ToString().Length.ToString() ?? "1";
			var result2 = (reader == null ? null : await (reader.ReadContentAsStringAsync()))?.Length.ToString() ?? "2";
			var readContentAsString4 = GetReader();
			var result3 = (readContentAsString4 == null ? null : await (readContentAsString4.ReadContentAsStringAsync()))?[0].ToString() ?? "3";
			var readContentAsString5 = (reader as XmlReader);
			var result4 = (readContentAsString5 == null ? null : await (readContentAsString5.ReadContentAsStringAsync()))?[0].ToString() ?? "3";
		}

		public async Task<object> ReturnAsync()
		{
			var reader = GetReader();
			return (reader == null ? null : await (reader.ReadContentAsStringAsync()))?.Trim().Length;
		}

		public async Task<bool> NestedExpressionAsync()
		{
			var reader = GetReader();
			{
				Transform((reader == null ? null : await (reader.ReadContentAsStringAsync())) ?? "test");
			}
			return true;
		}

		public async Task<bool> ExpressionAsync()
		{
			var reader = GetReader();
			Transform((reader == null ? null : await (reader.ReadContentAsStringAsync())) ?? "test");
			return true;
		}

		public async Task ExpressionVoidAsync()
		{
			var reader = GetReader();
			Transform((reader == null ? null : await (reader.ReadContentAsStringAsync())) ?? "test");
		}

		public async Task<object> ShouldIgnoreAsync()
		{
			var reader = GetReader();
			return (await (reader.ReadContentAsStringAsync())).Trim()?.Length ?? 0;
		}

		public async Task<string> TriviaAsync()
		{
			var reader = GetReader();
			return (reader == null ? null : await (reader.ReadContentAsStringAsync())) ?? "test";
		}
	}
}
