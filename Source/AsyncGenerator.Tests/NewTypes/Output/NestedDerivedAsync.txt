//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.NewTypes.Input
{

	public class NestedDerivedAsyncAsync
	{
		public Task WriteAsync()
		{
			return SimpleFile.WriteAsync("");
		}

		public class Nested : InternalReader
		{
			private readonly bool _test;

			public Nested()
			{
				_test = false;
			}

			public override Task<bool> ReadAsync()
			{
				try
				{
					return Task.FromResult<bool>(_test);
				}
				catch (Exception ex)
				{
					return Task.FromException<bool>(ex);
				}
			}

			public override bool Read()
			{
				return _test;
			}
		}

		public class Nested2 : ExternalReader
		{
			private bool Test { get; set; }

			public Nested2()
			{
				Test = false;
			}

			public override Task<bool> ReadAsync()
			{
				try
				{
					return Task.FromResult<bool>(Test);
				}
				catch (Exception ex)
				{
					return Task.FromException<bool>(ex);
				}
			}

			public override bool Read()
			{
				return Test;
			}
		}

		public class NestedBaseCall : InternalReader
		{
			private readonly bool _test;

			public NestedBaseCall()
			{
				_test = false;
			}

			public override async Task<bool> ReadAsync()
			{
				await (base.ReadAsync());
				return _test;
			}

			public override bool Read()
			{
				base.Read();
				return _test;
			}
		}

		public class Nested2BaseCall : ExternalReader
		{
			private bool Test { get; set; }

			public Nested2BaseCall()
			{
				Test = false;
			}

			public override async Task<bool> ReadAsync()
			{
				await (base.ReadAsync());
				return Test;
			}

			public override bool Read()
			{
				base.Read();
				return Test;
			}
		}

		public class Dummy
		{
			
		}
	}

	public partial class NestedDerivedAsync
	{

		public partial class Nested : InternalReader
		{

			public override Task<bool> ReadAsync()
			{
				try
				{
					return Task.FromResult<bool>(_test);
				}
				catch (Exception ex)
				{
					return Task.FromException<bool>(ex);
				}
			}
		}

		public partial class Nested2 : ExternalReader
		{

			public override Task<bool> ReadAsync()
			{
				try
				{
					return Task.FromResult<bool>(Test);
				}
				catch (Exception ex)
				{
					return Task.FromException<bool>(ex);
				}
			}
		}

		public partial class NestedBaseCall : InternalReader
		{

			public override async Task<bool> ReadAsync()
			{
				await (base.ReadAsync());
				return _test;
			}
		}

		public partial class Nested2BaseCall : ExternalReader
		{

			public override async Task<bool> ReadAsync()
			{
				await (base.ReadAsync());
				return Test;
			}
		}
	}
}
