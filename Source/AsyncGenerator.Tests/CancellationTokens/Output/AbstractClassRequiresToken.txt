//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.CancellationTokens.Input
{
	using System.Threading;
	public abstract partial class AbstractClass
	{
		public virtual Task ReadAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return SimpleFile.ReadAsync(cancellationToken);
		}

		public virtual Task<bool> WriteAsync(string value, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<bool>(cancellationToken);
			}
			cancellationToken.ThrowIfCancellationRequested();
			return SimpleFile.WriteAsync(value);
		}

		public abstract Task ClearAsync(CancellationToken cancellationToken);
	}

	public partial class DerivedClass : AbstractClass
	{
		public override Task ReadAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return base.ReadAsync(cancellationToken);
		}

		public override Task<bool> WriteAsync(string value, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<bool>(cancellationToken);
			}
			return base.WriteAsync(value, cancellationToken);
		}

		public override Task ClearAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return SimpleFile.ReadAsync(cancellationToken);
		}
	}
}
