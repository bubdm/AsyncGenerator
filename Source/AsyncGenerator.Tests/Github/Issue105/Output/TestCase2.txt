//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.Github.Issue105.Input
{
	public partial class TestCase2
	{

		public Task TestAsync(bool successful, CancellationToken cancellationToken = default(CancellationToken))
		{
			return NotifyLocalSynchsAfterTransactionCompletionAsync(successful, cancellationToken);
		}

		private async Task NotifyLocalSynchsAfterTransactionCompletionAsync(bool success, CancellationToken cancellationToken = default(CancellationToken))
		{
			if (_synchronizations != null)
			{
				for (int i = 0; i < _synchronizations.Count; i++)
				{
					var sync = _synchronizations[i];
					await (sync.AfterCompletionAsync(success, cancellationToken));
				}
			}
		}
	}

	#if TEST
#endif
}
