//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.Cref.Input
{
	public partial class TestCase
	{
		/// <summary>
		/// Uses the <see cref="ReadAsync(bool, IList{bool})"/> method
		/// </summary>
		public Task ReadAsync()
		{
			return SimpleFile.ReadAsync();
		}

		public Task ReadAsync(bool value, IList<bool> generic)
		{
			return SimpleFile.ReadAsync();
		}

		/// <summary>
		/// It is the same as calling <see cref="ReadFileAsync(bool, bool, bool)"/> with the last two parameters as false
		/// </summary>
		/// <param name="value"></param>
		public Task ReadFileAsync(bool value)
		{
			return ReadFileAsync(value, false);
		}

		/// <summary>
		/// Uses <see cref="ReadFileAsync(bool, bool, bool)"/> with the last parameter as false
		/// </summary>
		/// <param name="value"></param>
		/// <param name="value2"></param>
		public Task ReadFileAsync(bool value, bool value2)
		{
			return ReadFileAsync(value, value2, false);
		}

		public Task ReadFileAsync(bool value, bool value2, bool value3)
		{
			return SimpleFile.ReadAsync();
		}

		/// <summary>
		/// Uses <see cref="WriteToFileAsync(bool,byte[],IList{bool})"/>
		/// </summary>
		/// <returns></returns>
		public Task<bool> WriteAsync()
		{
			return WriteToFileAsync(false, null, null);
		}

		public Task<bool> WriteToFileAsync(bool value, byte[] bytes, IList<bool> bools)
		{
			return SimpleFile.WriteAsync("");
		}

	}
}
