//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.OmitAsync.Input
{
	public partial class TestCase
	{
		public async Task ReadAsyncNotOmittedAsync(string path)
		{
			if (path != "")
			{
				await (SimpleFile.ReadAsync());
			}
			else if (path == "/")
			{
				for (int i = 0; i < 10; i++)
				{
					await (SimpleFile.ReadAsync());
				}
			}
			else if(await (SimpleFile.WriteAsync("")))
			{
				await (SimpleFile.WriteAsync(""));
			}
		}

		public Task ReadAsyncOmittedAsync(string path)
		{
			try
			{
				if (path == "")
				{
					return SimpleFile.ReadAsync();
				}
				else if (path == "/")
				{
					if (path == "")
					{
						return SimpleFile.ReadAsync();
					}
				}
				else
				{
					return SimpleFile.ReadAsync();
				}
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task BlockAsyncOmittedAsync(string path)
		{
			try
			{
				{
					{
						if(path == "")
							return SimpleFile.ReadAsync();
					}
				}
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task<bool> IfAsyncOmittedAsync(string content)
		{
			try
			{
				{
					if (content == null)
					{
						return SimpleFile.WriteAsync(null);
					}
					return content == "" ? SimpleFile.WriteAsync(content) : Task.FromResult<bool>(false);
				}
			}
			catch (Exception ex)
			{
				return Task.FromException<bool>(ex);
			}
		}

		public Task<bool> ConditionAsyncOmitted2Async(string content)
		{
			try
			{
				return content == "" ? SimpleFile.WriteAsync(null) : SimpleFile.WriteAsync(content);
			}
			catch (Exception ex)
			{
				return Task.FromException<bool>(ex);
			}
		}

		public Task IfElseAsyncOmittedAsync(string content)
		{
			try
			{
				// Verrryyyyyyy looooooooooong
				// comeeeeeeeeent
				if (content == null)
				{
					return SimpleFile.WriteAsync(null);
				}
				else
				{
					return SimpleFile.WriteAsync(null);
				}
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task IfElseNoBlockAsyncOmittedAsync(string content)
		{
			try
			{
				// Verrryyyyyyy looooooooooong
				// comeeeeeeeeent
				if (content == null)
					return SimpleFile.WriteAsync(null);
				else
					return SimpleFile.WriteAsync(null);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task IfElseNoBlockAsyncOmitted2Async(string content)
		{
			try
			{
				if (content == null)
					Console.WriteLine();
				else
					return SimpleFile.WriteAsync(null);
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}
