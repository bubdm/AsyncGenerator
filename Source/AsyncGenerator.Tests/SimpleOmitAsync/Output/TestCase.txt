//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.SimpleOmitAsync.Input
{
	using System.Threading.Tasks;
	public partial class TestCase
	{
		public Task<bool> SimpleReturnAsync()
		{
			return SimpleFile.WriteAsync("");
		}

		public async Task<bool> DoubleCallReturnAsync()
		{
			return await (SimpleFile.WriteAsync(await (ReadFileAsync())));
		}

		public Task<string> SyncReturnAsync()
		{
			try
			{
				return Task.FromResult<string>(SyncReadFile());
			}
			catch (System.Exception ex)
			{
				return Task.FromException<string>(ex);
			}
		}

		public Task SimpleVoidAsync()
		{
			return SimpleFile.ReadAsync();
		}

		public Task DoubleCallVoidAsync()
		{
			try
			{
				SyncReadFile();
				return SimpleFile.ReadAsync();
			}
			catch (System.Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task ExpressionVoidAsync() => SimpleFile.ReadAsync();

		public Task<bool> ExpressionReturnAsync() => SimpleFile.WriteAsync("");

		public async Task<string> ReadFileAsync()
		{
			await (SimpleFile.ReadAsync());
			return "";
		}

		public Task<string> SimpleReturnStringAsync()
		{
			return Task.FromResult<string>("");
		}

		public Task<string> SimpleReturnDefaultOfStringAsync()
		{
			return Task.FromResult<string>(default(string));
		}

		public Task<decimal> SimpleReturnDecimalAsync()
		{
			return Task.FromResult<decimal>(25m);
		}

		public Task<decimal> ReturnDecimalConstructorAsync()
		{
			return Task.FromResult<decimal>(new decimal(25));
		}
	}
}
