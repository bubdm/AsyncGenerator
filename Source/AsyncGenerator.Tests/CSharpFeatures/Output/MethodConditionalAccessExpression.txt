//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.CSharpFeatures.Input
{
	public partial class MethodConditionalAccessExpression
	{
		public async Task<object> ReturnVariableAsync()
		{
			var reader = GetReader();
			var result = (reader == null ? null : await (reader.ReadContentAsObjectAsync()))?.ToString().ToUpper();
			if (result == "Test")
			{
				return null;
			}
			return result;
		}

		public async Task<bool> ExpressionAsync()
		{
			var reader = GetReader();
			(reader == null ? null : await (reader.ReadContentAsObjectAsync()))?.ToString();
			return true;
		}

		public async Task<bool> ArgumentAsync()
		{
			var reader = GetReader();
			Transform((reader == null ? null : await (reader.ReadContentAsObjectAsync())));
			return true;
		}

		public async Task<bool> ValueTypeAsync()
		{
			var reader = GetReader();
			var val = (reader == null ? (int?) null : await (reader.ReadContentAsBase64Async(new byte[0], 0, 0)))?.ToString();
			return val == "1";
		}

		public async Task<bool> VoidAsync()
		{
			var reader = GetReader();
			(reader == null ? null : await (reader.ReadContentAsStringAsync()))?.CopyTo(0, new char[0], 0, 0);
			return true;
		}

		public async Task<bool> Void2Async()
		{
			var reader = GetReader();
			var readContentAsStringTask = reader?.ReadContentAsStringAsync();
			if (readContentAsStringTask != null)
			{
				await (readContentAsStringTask);
			}
			return true;
		}
	}
}
