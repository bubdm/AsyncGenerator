//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Localization
{
	public partial class PrivateMethods
	{

		#if TEST
		#endif

		private Task<IList> GetResultsAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			return ListAsync(cancellationToken);
		}

		private async Task<IEnumerable<TResult>> GetCurrentResultAsync<TResult>(int currentIndex, CancellationToken cancellationToken = default(CancellationToken))
		{
			return ((IList)(await (GetResultsAsync(cancellationToken)))[currentIndex]).Cast<TResult>();
		}

		protected virtual async Task<IList> ListAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			await (Task.Delay(1, cancellationToken));
			return null;
		}
	}
}