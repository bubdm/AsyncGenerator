//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;
using NUnit.Framework;

namespace AsyncGenerator.Tests.AnonymousFunctions.Input
{
	using System.Threading;

	public partial class TestCase
	{
		public Task ReadAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Assert.DoesNotThrowAsync(() =>
				{
					try
					{
						Console.WriteLine();
						return SimpleFile.ReadAsync(cancellationToken);
					}
					catch (Exception ex)
					{
						return Task.FromException<object>(ex);
					}
				});
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task Read3Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Assert.DoesNotThrowAsync(() =>
				{
					return SimpleFile.ReadAsync(cancellationToken);
				});
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task Read4Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				var list = new List<RunFunction>();
				list.Add(new RunFunction(() =>
				{
					SimpleFile.Read();
				}));
				return SimpleFile.ReadAsync(cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task Read5Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Assert.DoesNotThrowAsync(() => SimpleFile.ReadAsync(cancellationToken));
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task Read7Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Assert.DoesNotThrowAsync(() => SimpleFile.StreamReadAsync(cancellationToken));
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task Read8Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Assert.DoesNotThrowAsync(() => ReadAsync(cancellationToken));
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task Read9Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Assert.ThrowsAsync<Exception>(() => SimpleFile.ReadAsync(cancellationToken));
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public async Task<bool> Read10Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			var result = false;
			Assert.That(() => result = SimpleFile.Write(""), Throws.Nothing);

			RunFunction test = null;
			Assert.That(() => test = SimpleFile.Write<RunFunction>(""), Throws.Nothing);

			await (SimpleFile.ReadAsync(cancellationToken));
			return result;
		}

		public Task Read12Async()
		{
			try
			{
				TextWriter tw = new StringWriter();
				return Runner.RunAsync(tw.Write);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task Read13Async()
		{
			return Runner.RunAsync(Console.WriteLine);
		}
	}
}
