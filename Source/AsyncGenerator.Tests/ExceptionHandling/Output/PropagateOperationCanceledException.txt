//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.ExceptionHandling.Input
{
	public partial class PropagateOperationCanceledException
	{
		public async Task MethodThatCatchesExceptionsAsync(CancellationToken cancellationToken)
		{
			try
			{
				await (SimpleFile.ReadAsync(cancellationToken));
			}
			catch (OperationCanceledException) { throw; }
			catch (Exception ex)
			{
				throw new Exception("My wrapped exception", ex);
			}
		}

		public async Task MethodThatCatchesMultipleExceptionsAsync(CancellationToken cancellationToken)
		{
			try
			{
				await (SimpleFile.ReadAsync(cancellationToken));
			}
			catch (OperationCanceledException) { throw; }
			catch (InvalidOperationException ex)
			{
				throw new Exception("My wrapped exception", ex);
			}
			catch (Exception ex)
			{
				throw new Exception("My wrapped exception", ex);
			}
		}

		public async Task MethodThatCatchesExceptionsNoDeclarationAsync(CancellationToken cancellationToken)
		{
			try
			{
				await (SimpleFile.ReadAsync(cancellationToken));
			}
			catch (OperationCanceledException) { throw; }
			catch
			{
				throw new Exception("My exception");
			}
		}

		public async Task MethodThatCatchesExceptionsNestedAsync(CancellationToken cancellationToken)
		{
			try
			{
				try
				{
					await (SimpleFile.ReadAsync(cancellationToken));
				}
				catch (OperationCanceledException) { throw; }
				catch (Exception ex)
				{
					throw new Exception("My wrapped exception", ex);
				}
			}
			catch (OperationCanceledException) { throw; }
			catch (Exception ex)
			{
				throw new Exception("My wrapped exception", ex);
			}
		}

		public async Task LocalFunctionThatCatchesExceptionsAsync(CancellationToken cancellationToken)
		{
			await (InternalAsync());

			async Task InternalAsync()
			{
				try
				{
					await (SimpleFile.ReadAsync(cancellationToken));
				}
				catch (OperationCanceledException) { throw; }
				catch (Exception ex)
				{
					throw new Exception("My wrapped exception", ex);
				}
			}
		}
	}
}